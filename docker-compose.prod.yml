version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: forge-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - forge-network

  # NestJS Backend with GraphQL
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: forge-backend-prod
    restart: always
    env_file:
      - .env
    environment:
      NODE_ENV: production
      POSTGRES_HOST: postgres
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - forge-network

  # Angular Frontend served by Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: forge-frontend-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - forge-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: forge-redis-prod
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - forge-network
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}

networks:
  forge-network:
    driver: bridge
    name: forge-network-prod

volumes:
  postgres_data:
    name: forge-postgres-data-prod
  redis_data:
    name: forge-redis-data-prod
